import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error
import joblib  # For saving the model and scaler

# Load dataset
df = pd.read_csv("healthh.csv")

# Drop unnecessary columns
df_cleaned = df.drop(columns=["Visit ID", "Patient ID", "Hospital ID", "Hospital Name", "Visit Date"])

# Encode categorical variables
categorical_cols = ["Region", "Day of Week", "Season", "Time of Day", "Urgency Level", "Patient Outcome"]
label_encoders = {col: LabelEncoder() for col in categorical_cols}
for col in categorical_cols:
    df_cleaned[col] = label_encoders[col].fit_transform(df_cleaned[col])

# Save label encoders for later use
for col, le in label_encoders.items():
    joblib.dump(le, f"{col}_label_encoder.pkl")

# Separate features and target
X = df_cleaned.drop(columns=["Total Wait Time (min)"])
y = df_cleaned["Total Wait Time (min)"]

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize numerical features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train optimized XGBoost model
model = XGBRegressor(n_estimators=35, learning_rate=0.06, max_depth=3, random_state=42)
model.fit(X_train_scaled, y_train)

# Save the model as a .pkl file
joblib.dump(model, "xgboost_wait_time.pkl")
joblib.dump(scaler, "scaler.pkl")

# Evaluate model performance
y_pred = model.predict(X_test_scaled)
mae = mean_absolute_error(y_test, y_pred)
accuracy = max(0, (1 - (mae / y_test.mean())) * 100)
print(f"Model Approximate Accuracy: {accuracy:.2f}%")
